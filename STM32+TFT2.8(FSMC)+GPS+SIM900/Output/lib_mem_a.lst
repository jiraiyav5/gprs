


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                               uC/LIB
    3 00000000         ;                                       CUSTOM LIBRARY M
                       ODULES
    4 00000000         ;
    5 00000000         ;                          (c) Copyright 2004-2008; Micr
                       ium, Inc.; Weston, FL
    6 00000000         ;
    7 00000000         ;               All rights reserved.  Protected by inter
                       national copyright laws.
    8 00000000         ;
    9 00000000         ;               uC/LIB is provided in source form for FR
                       EE evaluation, for educational
   10 00000000         ;               use or peaceful research.  If you plan o
                       n using uC/LIB in a commercial
   11 00000000         ;               product you need to contact Micrium to p
                       roperly license its use in your
   12 00000000         ;               product.  We provide ALL the source code
                        for your convenience and to
   13 00000000         ;               help you experience uC/LIB.  The fact th
                       at the source code is provided
   14 00000000         ;               does NOT mean that you can use it withou
                       t paying a licensing fee.
   15 00000000         ;
   16 00000000         ;               Knowledge of the source code may NOT be 
                       used to develop a similar product.
   17 00000000         ;
   18 00000000         ;               Please help us continue to provide the E
                       mbedded community with the finest
   19 00000000         ;               software available.  Your honesty is gre
                       atly appreciated.
   20 00000000         ;*******************************************************
                       *************************************************
   21 00000000         
   22 00000000         
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         ;
   25 00000000         ;                                     STANDARD MEMORY OP
                       ERATIONS
   26 00000000         ;
   27 00000000         ;                                           ARM-Cortex-M
                       3
   28 00000000         ;                                     RealView Developme
                       nt Suite
   29 00000000         ;                            RealView Microcontroller De
                       velopment Kit (MDK)
   30 00000000         ;                                      ARM Developer Sui
                       te (ADS)
   31 00000000         ;                                           Keil uVision
                       
   32 00000000         ;
   33 00000000         ; Filename      : lib_mem_a.asm
   34 00000000         ; Version       : V1.25
   35 00000000         ; Programmer(s) : JDH
   36 00000000         ;                 BAN
   37 00000000         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 2 


   38 00000000         ; Note(s)       : (1) NO compiler-supplied standard libr
                       ary functions are used in library or product software.
   39 00000000         ;
   40 00000000         ;                     (a) ALL standard library functions
                        are implemented in the custom library modules :
   41 00000000         ;
   42 00000000         ;                         (1) \<Custom Library Directory
                       >\lib*.*
   43 00000000         ;
   44 00000000         ;                         (2) \<Custom Library Directory
                       >\Ports\<cpu>\<compiler>\lib*_a.*
   45 00000000         ;
   46 00000000         ;                               where
   47 00000000         ;                                       <Custom Library 
                       Directory>      directory path for custom library softwa
                       re
   48 00000000         ;                                       <cpu>           
                                       directory name for specific processor (C
                       PU)
   49 00000000         ;                                       <compiler>      
                                       directory name for specific compiler
   50 00000000         ;
   51 00000000         ;                     (b) Product-specific library funct
                       ions are implemented in individual products.
   52 00000000         ;
   53 00000000         ;                 (2) Assumes ARM CPU mode configured fo
                       r Little Endian.
   54 00000000         ;*******************************************************
                       *************************************************
   55 00000000         
   56 00000000         
   57 00000000         ;*******************************************************
                       *************************************************
   58 00000000         ;                                           PUBLIC FUNCT
                       IONS
   59 00000000         ;*******************************************************
                       *************************************************
   60 00000000         
   61 00000000                 EXPORT           Mem_Copy
   62 00000000         
   63 00000000         
   64 00000000         ;*******************************************************
                       *************************************************
   65 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   66 00000000         ;*******************************************************
                       *************************************************
   67 00000000         
   68 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   69 00000000                 THUMB
   70 00000000                 REQUIRE8
   71 00000000                 PRESERVE8
   72 00000000         
   73 00000000         
   74 00000000         ;$PAGE
   75 00000000         ;*******************************************************
                       *************************************************
   76 00000000         ;                                             Mem_Copy()



ARM Macro Assembler    Page 3 


                       
   77 00000000         ;
   78 00000000         ; Description : Copy data octets from one buffer to anot
                       her buffer.
   79 00000000         ;
   80 00000000         ; Argument(s) : pdest       Pointer to destination memor
                       y buffer.
   81 00000000         ;
   82 00000000         ;               psrc        Pointer to source      memor
                       y buffer.
   83 00000000         ;
   84 00000000         ;               size        Number of data buffer octets
                        to copy.
   85 00000000         ;
   86 00000000         ; Return(s)   : none.
   87 00000000         ;
   88 00000000         ; Caller(s)   : Application.
   89 00000000         ;
   90 00000000         ; Note(s)     : (1) Null copies allowed (i.e. 0-octet si
                       ze).
   91 00000000         ;
   92 00000000         ;               (2) Memory buffers NOT checked for overl
                       apping.
   93 00000000         ;
   94 00000000         ;               (3) Modulo arithmetic is used to determi
                       ne whether a memory buffer starts on a 'CPU_ALIGN'
   95 00000000         ;                   address boundary.
   96 00000000         ;
   97 00000000         ;               (4) ARM Cortex-M3 processors use a subse
                       t of the ARM Thumb-2 instruction set which does
   98 00000000         ;                   NOT support 16-bit conditional branc
                       h instructions but ONLY supports 8-bit conditional 
   99 00000000         ;                   branch instructions.
  100 00000000         ;
  101 00000000         ;                   Therefore, branches exceeding 8-bit,
                        signed, relative offsets :
  102 00000000         ;
  103 00000000         ;                   (a) CANNOT be implemented with     c
                       onditional branches; but ...
  104 00000000         ;                   (b) MUST   be implemented with non-c
                       onditional branches.
  105 00000000         ;*******************************************************
                       *************************************************
  106 00000000         
  107 00000000         ; void  Mem_Copy (void        *pdest,       ;  ==>  R0
  108 00000000         ;                 void        *psrc,        ;  ==>  R1
  109 00000000         ;                 CPU_SIZE_T   size)        ;  ==>  R2
  110 00000000         
  111 00000000         Mem_Copy
  112 00000000 2800            CMP              R0, #0
  113 00000002 D100            BNE              Mem_Copy_1
  114 00000004 4770            BX               LR          ; return if pdest =
                                                            = NULL
  115 00000006         
  116 00000006         Mem_Copy_1
  117 00000006 2900            CMP              R1, #0
  118 00000008 D100            BNE              Mem_Copy_2
  119 0000000A 4770            BX               LR          ; return if psrc  =
                                                            = NULL



ARM Macro Assembler    Page 4 


  120 0000000C         
  121 0000000C         Mem_Copy_2
  122 0000000C 2A00            CMP              R2, #0
  123 0000000E D100            BNE              Mem_Copy_3
  124 00000010 4770            BX               LR          ; return if size  =
                                                            = 0
  125 00000012         
  126 00000012         Mem_Copy_3
  127 00000012 E92D 1FF8       STMFD            SP!, {R3-R12} ; save registers 
                                                            on stack
  128 00000016         
  129 00000016         
  130 00000016         ;$PAGE
  131 00000016         Chk_Align_32                         ; check if both des
                                                            t & src 32-bit alig
                                                            ned
  132 00000016 F000 0303       AND              R3, R0, #0x03
  133 0000001A F001 0403       AND              R4, R1, #0x03
  134 0000001E 42A3            CMP              R3, R4
  135 00000020 D111            BNE              Chk_Align_16 ; not 32-bit align
                                                            ed, check for 16-bi
                                                            t alignment
  136 00000022         
  137 00000022 F1C3 0304       RSB              R3, R3, #0x04 ; compute 1-2-3 p
                                                            re-copy bytes (to a
                                                            lign to the next 32
                                                            -bit boundary)
  138 00000026 F003 0303       AND              R3, R3, #0x03
  139 0000002A         
  140 0000002A         Pre_Copy_1
  141 0000002A 2B01            CMP              R3, #1      ; copy 1-2-3 bytes 
                                                            (to align to the ne
                                                            xt 32-bit boundary)
                                                            
  142 0000002C D31D            BCC              Copy_32_1   ; start real 32-bit
                                                             copy
  143 0000002E 2A01            CMP              R2, #1      ; check if any more
                                                             data to copy
  144 00000030 D200            BCS              Pre_Copy_1_Cont
  145 00000032 E0F2            B                Mem_Copy_END ;           no mor
                                                            e data to copy (see
                                                             Note #4b)
  146 00000034         
  147 00000034         Pre_Copy_1_Cont
  148 00000034 F811 4B01       LDRB             R4, [R1], #1
  149 00000038 F800 4B01       STRB             R4, [R0], #1
  150 0000003C F1A3 0301       SUB              R3, R3, #1
  151 00000040 F1A2 0201       SUB              R2, R2, #1
  152 00000044 E7F1            B                Pre_Copy_1
  153 00000046         
  154 00000046         
  155 00000046         Chk_Align_16                         ; check if both des
                                                            t & src 16-bit alig
                                                            ned
  156 00000046 F000 0301       AND              R3, R0, #0x01
  157 0000004A F001 0401       AND              R4, R1, #0x01
  158 0000004E 42A3            CMP              R3, R4
  159 00000050 D000            BEQ              Pre_Copy_2
  160 00000052 E094            B                Copy_08_1   ; not 16-bit aligne



ARM Macro Assembler    Page 5 


                                                            d, start 8-bit copy
                                                             (see Note #4b)
  161 00000054         
  162 00000054         Pre_Copy_2
  163 00000054 2B01            CMP              R3, #1      ; copy 1 byte (to a
                                                            lign to the next 16
                                                            -bit boundary)
  164 00000056 D344            BCC              Copy_16_1   ; start real 16-bit
                                                             copy
  165 00000058         
  166 00000058 F811 4B01       LDRB             R4, [R1], #1
  167 0000005C F800 4B01       STRB             R4, [R0], #1
  168 00000060 F1A3 0301       SUB              R3, R3, #1
  169 00000064 F1A2 0201       SUB              R2, R2, #1
  170 00000068 E7F4            B                Pre_Copy_2
  171 0000006A         
  172 0000006A         
  173 0000006A         Copy_32_1
  174 0000006A F5B2 7FB4       CMP              R2, #(04*10*09) ; Copy 9 chunks
                                                             of 10 32-bit words
                                                             (360 octets per lo
                                                            op)
  175 0000006E D326            BCC              Copy_32_2
  176 00000070 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  177 00000074 E8A0 1FF8       STMIA            R0!, {R3-R12}
  178 00000078 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  179 0000007C E8A0 1FF8       STMIA            R0!, {R3-R12}
  180 00000080 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  181 00000084 E8A0 1FF8       STMIA            R0!, {R3-R12}
  182 00000088 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  183 0000008C E8A0 1FF8       STMIA            R0!, {R3-R12}
  184 00000090 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  185 00000094 E8A0 1FF8       STMIA            R0!, {R3-R12}
  186 00000098 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  187 0000009C E8A0 1FF8       STMIA            R0!, {R3-R12}
  188 000000A0 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  189 000000A4 E8A0 1FF8       STMIA            R0!, {R3-R12}
  190 000000A8 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  191 000000AC E8A0 1FF8       STMIA            R0!, {R3-R12}
  192 000000B0 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  193 000000B4 E8A0 1FF8       STMIA            R0!, {R3-R12}
  194 000000B8 F5A2 72B4       SUB              R2, R2, #(04*10*09)
  195 000000BC E7D5            B                Copy_32_1
  196 000000BE         
  197 000000BE         Copy_32_2
  198 000000BE 2A28            CMP              R2, #(04*10*01) ; Copy chunks o
                                                            f 10 32-bit words (
                                                            40 octets per loop)
                                                            
  199 000000C0 D306            BCC              Copy_32_3
  200 000000C2 E8B1 1FF8       LDMIA            R1!, {R3-R12}
  201 000000C6 E8A0 1FF8       STMIA            R0!, {R3-R12}
  202 000000CA F1A2 0228       SUB              R2, R2, #(04*10*01)
  203 000000CE E7F6            B                Copy_32_2
  204 000000D0         
  205 000000D0         Copy_32_3
  206 000000D0 2A04            CMP              R2, #(04*01*01) ; Copy remainin
                                                            g 32-bit words
  207 000000D2 D306            BCC              Copy_16_1



ARM Macro Assembler    Page 6 


  208 000000D4 F851 3B04       LDR              R3, [R1], #4
  209 000000D8 F840 3B04       STR              R3, [R0], #4
  210 000000DC F1A2 0204       SUB              R2, R2, #(04*01*01)
  211 000000E0 E7F6            B                Copy_32_3
  212 000000E2         
  213 000000E2         ;$PAGE
  214 000000E2         Copy_16_1
  215 000000E2 2A20            CMP              R2, #(02*01*16) ; Copy chunks o
                                                            f 16 16-bit words (
                                                            32 bytes per loop)
  216 000000E4 D342            BCC              Copy_16_2
  217 000000E6 F831 3B02       LDRH             R3, [R1], #2
  218 000000EA F820 3B02       STRH             R3, [R0], #2
  219 000000EE F831 3B02       LDRH             R3, [R1], #2
  220 000000F2 F820 3B02       STRH             R3, [R0], #2
  221 000000F6 F831 3B02       LDRH             R3, [R1], #2
  222 000000FA F820 3B02       STRH             R3, [R0], #2
  223 000000FE F831 3B02       LDRH             R3, [R1], #2
  224 00000102 F820 3B02       STRH             R3, [R0], #2
  225 00000106 F831 3B02       LDRH             R3, [R1], #2
  226 0000010A F820 3B02       STRH             R3, [R0], #2
  227 0000010E F831 3B02       LDRH             R3, [R1], #2
  228 00000112 F820 3B02       STRH             R3, [R0], #2
  229 00000116 F831 3B02       LDRH             R3, [R1], #2
  230 0000011A F820 3B02       STRH             R3, [R0], #2
  231 0000011E F831 3B02       LDRH             R3, [R1], #2
  232 00000122 F820 3B02       STRH             R3, [R0], #2
  233 00000126 F831 3B02       LDRH             R3, [R1], #2
  234 0000012A F820 3B02       STRH             R3, [R0], #2
  235 0000012E F831 3B02       LDRH             R3, [R1], #2
  236 00000132 F820 3B02       STRH             R3, [R0], #2
  237 00000136 F831 3B02       LDRH             R3, [R1], #2
  238 0000013A F820 3B02       STRH             R3, [R0], #2
  239 0000013E F831 3B02       LDRH             R3, [R1], #2
  240 00000142 F820 3B02       STRH             R3, [R0], #2
  241 00000146 F831 3B02       LDRH             R3, [R1], #2
  242 0000014A F820 3B02       STRH             R3, [R0], #2
  243 0000014E F831 3B02       LDRH             R3, [R1], #2
  244 00000152 F820 3B02       STRH             R3, [R0], #2
  245 00000156 F831 3B02       LDRH             R3, [R1], #2
  246 0000015A F820 3B02       STRH             R3, [R0], #2
  247 0000015E F831 3B02       LDRH             R3, [R1], #2
  248 00000162 F820 3B02       STRH             R3, [R0], #2
  249 00000166 F1A2 0220       SUB              R2, R2, #(02*01*16)
  250 0000016A E7BA            B                Copy_16_1
  251 0000016C         
  252 0000016C         Copy_16_2
  253 0000016C 2A02            CMP              R2, #(02*01*01) ; Copy remainin
                                                            g 16-bit words
  254 0000016E D306            BCC              Copy_08_1
  255 00000170 F831 3B02       LDRH             R3, [R1], #2
  256 00000174 F820 3B02       STRH             R3, [R0], #2
  257 00000178 F1A2 0202       SUB              R2, R2, #(02*01*01)
  258 0000017C E7F6            B                Copy_16_2
  259 0000017E         
  260 0000017E         ;$PAGE
  261 0000017E         Copy_08_1
  262 0000017E 2A10            CMP              R2, #(01*01*16) ; Copy chunks o
                                                            f 16 8-bit words (1



ARM Macro Assembler    Page 7 


                                                            6 bytes per loop)
  263 00000180 D342            BCC              Copy_08_2
  264 00000182 F811 3B01       LDRB             R3, [R1], #1
  265 00000186 F800 3B01       STRB             R3, [R0], #1
  266 0000018A F811 3B01       LDRB             R3, [R1], #1
  267 0000018E F800 3B01       STRB             R3, [R0], #1
  268 00000192 F811 3B01       LDRB             R3, [R1], #1
  269 00000196 F800 3B01       STRB             R3, [R0], #1
  270 0000019A F811 3B01       LDRB             R3, [R1], #1
  271 0000019E F800 3B01       STRB             R3, [R0], #1
  272 000001A2 F811 3B01       LDRB             R3, [R1], #1
  273 000001A6 F800 3B01       STRB             R3, [R0], #1
  274 000001AA F811 3B01       LDRB             R3, [R1], #1
  275 000001AE F800 3B01       STRB             R3, [R0], #1
  276 000001B2 F811 3B01       LDRB             R3, [R1], #1
  277 000001B6 F800 3B01       STRB             R3, [R0], #1
  278 000001BA F811 3B01       LDRB             R3, [R1], #1
  279 000001BE F800 3B01       STRB             R3, [R0], #1
  280 000001C2 F811 3B01       LDRB             R3, [R1], #1
  281 000001C6 F800 3B01       STRB             R3, [R0], #1
  282 000001CA F811 3B01       LDRB             R3, [R1], #1
  283 000001CE F800 3B01       STRB             R3, [R0], #1
  284 000001D2 F811 3B01       LDRB             R3, [R1], #1
  285 000001D6 F800 3B01       STRB             R3, [R0], #1
  286 000001DA F811 3B01       LDRB             R3, [R1], #1
  287 000001DE F800 3B01       STRB             R3, [R0], #1
  288 000001E2 F811 3B01       LDRB             R3, [R1], #1
  289 000001E6 F800 3B01       STRB             R3, [R0], #1
  290 000001EA F811 3B01       LDRB             R3, [R1], #1
  291 000001EE F800 3B01       STRB             R3, [R0], #1
  292 000001F2 F811 3B01       LDRB             R3, [R1], #1
  293 000001F6 F800 3B01       STRB             R3, [R0], #1
  294 000001FA F811 3B01       LDRB             R3, [R1], #1
  295 000001FE F800 3B01       STRB             R3, [R0], #1
  296 00000202 F1A2 0210       SUB              R2, R2, #(01*01*16)
  297 00000206 E7BA            B                Copy_08_1
  298 00000208         
  299 00000208         Copy_08_2
  300 00000208 2A01            CMP              R2, #(01*01*01) ; Copy remainin
                                                            g 8-bit words
  301 0000020A D306            BCC              Mem_Copy_END
  302 0000020C F811 3B01       LDRB             R3, [R1], #1
  303 00000210 F800 3B01       STRB             R3, [R0], #1
  304 00000214 F1A2 0201       SUB              R2, R2, #(01*01*01)
  305 00000218 E7F6            B                Copy_08_2
  306 0000021A         
  307 0000021A         
  308 0000021A         Mem_Copy_END
  309 0000021A E8BD 1FF8       LDMFD            SP!, {R3-R12} ; restore registe
                                                            rs from stack
  310 0000021E 4770            BX               LR          ; return
  311 00000220         
  312 00000220         
  313 00000220                 END
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\Output
\lib_mem_a.d -o.\Output\lib_mem_a.o -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\I
NC\ST\STM32F10x --list=.\Output\lib_mem_a.lst uC-LIB\Ports\lib_mem_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 68 in file uC-LIB\Ports\lib_mem_a.asm
   Uses
      None
Comment: .text unused
Chk_Align_16 00000046

Symbol: Chk_Align_16
   Definitions
      At line 155 in file uC-LIB\Ports\lib_mem_a.asm
   Uses
      At line 135 in file uC-LIB\Ports\lib_mem_a.asm
Comment: Chk_Align_16 used once
Chk_Align_32 00000016

Symbol: Chk_Align_32
   Definitions
      At line 131 in file uC-LIB\Ports\lib_mem_a.asm
   Uses
      None
Comment: Chk_Align_32 unused
Copy_08_1 0000017E

Symbol: Copy_08_1
   Definitions
      At line 261 in file uC-LIB\Ports\lib_mem_a.asm
   Uses
      At line 160 in file uC-LIB\Ports\lib_mem_a.asm
      At line 254 in file uC-LIB\Ports\lib_mem_a.asm
      At line 297 in file uC-LIB\Ports\lib_mem_a.asm

Copy_08_2 00000208

Symbol: Copy_08_2
   Definitions
      At line 299 in file uC-LIB\Ports\lib_mem_a.asm
   Uses
      At line 263 in file uC-LIB\Ports\lib_mem_a.asm
      At line 305 in file uC-LIB\Ports\lib_mem_a.asm

Copy_16_1 000000E2

Symbol: Copy_16_1
   Definitions
      At line 214 in file uC-LIB\Ports\lib_mem_a.asm
   Uses
      At line 164 in file uC-LIB\Ports\lib_mem_a.asm
      At line 207 in file uC-LIB\Ports\lib_mem_a.asm
      At line 250 in file uC-LIB\Ports\lib_mem_a.asm

Copy_16_2 0000016C

Symbol: Copy_16_2
   Definitions
      At line 252 in file uC-LIB\Ports\lib_mem_a.asm
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 216 in file uC-LIB\Ports\lib_mem_a.asm
      At line 258 in file uC-LIB\Ports\lib_mem_a.asm

Copy_32_1 0000006A

Symbol: Copy_32_1
   Definitions
      At line 173 in file uC-LIB\Ports\lib_mem_a.asm
   Uses
      At line 142 in file uC-LIB\Ports\lib_mem_a.asm
      At line 195 in file uC-LIB\Ports\lib_mem_a.asm

Copy_32_2 000000BE

Symbol: Copy_32_2
   Definitions
      At line 197 in file uC-LIB\Ports\lib_mem_a.asm
   Uses
      At line 175 in file uC-LIB\Ports\lib_mem_a.asm
      At line 203 in file uC-LIB\Ports\lib_mem_a.asm

Copy_32_3 000000D0

Symbol: Copy_32_3
   Definitions
      At line 205 in file uC-LIB\Ports\lib_mem_a.asm
   Uses
      At line 199 in file uC-LIB\Ports\lib_mem_a.asm
      At line 211 in file uC-LIB\Ports\lib_mem_a.asm

Mem_Copy 00000000

Symbol: Mem_Copy
   Definitions
      At line 111 in file uC-LIB\Ports\lib_mem_a.asm
   Uses
      At line 61 in file uC-LIB\Ports\lib_mem_a.asm
Comment: Mem_Copy used once
Mem_Copy_1 00000006

Symbol: Mem_Copy_1
   Definitions
      At line 116 in file uC-LIB\Ports\lib_mem_a.asm
   Uses
      At line 113 in file uC-LIB\Ports\lib_mem_a.asm
Comment: Mem_Copy_1 used once
Mem_Copy_2 0000000C

Symbol: Mem_Copy_2
   Definitions
      At line 121 in file uC-LIB\Ports\lib_mem_a.asm
   Uses
      At line 118 in file uC-LIB\Ports\lib_mem_a.asm
Comment: Mem_Copy_2 used once
Mem_Copy_3 00000012

Symbol: Mem_Copy_3
   Definitions
      At line 126 in file uC-LIB\Ports\lib_mem_a.asm



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 123 in file uC-LIB\Ports\lib_mem_a.asm
Comment: Mem_Copy_3 used once
Mem_Copy_END 0000021A

Symbol: Mem_Copy_END
   Definitions
      At line 308 in file uC-LIB\Ports\lib_mem_a.asm
   Uses
      At line 145 in file uC-LIB\Ports\lib_mem_a.asm
      At line 301 in file uC-LIB\Ports\lib_mem_a.asm

Pre_Copy_1 0000002A

Symbol: Pre_Copy_1
   Definitions
      At line 140 in file uC-LIB\Ports\lib_mem_a.asm
   Uses
      At line 152 in file uC-LIB\Ports\lib_mem_a.asm
Comment: Pre_Copy_1 used once
Pre_Copy_1_Cont 00000034

Symbol: Pre_Copy_1_Cont
   Definitions
      At line 147 in file uC-LIB\Ports\lib_mem_a.asm
   Uses
      At line 144 in file uC-LIB\Ports\lib_mem_a.asm
Comment: Pre_Copy_1_Cont used once
Pre_Copy_2 00000054

Symbol: Pre_Copy_2
   Definitions
      At line 162 in file uC-LIB\Ports\lib_mem_a.asm
   Uses
      At line 159 in file uC-LIB\Ports\lib_mem_a.asm
      At line 170 in file uC-LIB\Ports\lib_mem_a.asm

18 symbols
341 symbols in table
